# Nginx configuration file
# Based on h5bp's (http://j.mp/MkF83x) and nginx performnce tuning ()

# Run as a less privileged user for security reasons
user www-data www-data;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes 2;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at which you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;
  use epoll;
  multi_accept on;
}

# Default error log file
# (this is only used when you don't override error_log on a server{} level)
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

http {

  # Hide nginx version information
  server_tokens off;

  # Enable symlinks
  disable_symlinks off;

  # Prevents 413 Error. For uploading files (http://j.mp/PHnAjx).
  client_max_body_size 20M;

  # Define the MIME types for files
  include mime.types;
  default_type  application/octet-stream;

  # Update charset_types due to updated mime.types
  charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

  # Format to use in log files
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Default log file
  # (this is only used when you don't override access_log on a server{} level)
  # access_log /var/log/nginx/access.log;
  access_log /var/log/nginx/access.log;

  # Turning off the logs completely on the web server can save a lot
  # of I/O as well as CPU power.
  access_log off;

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 65)
  keepalive_timeout 30;

  # Specify the number of connections to be kept alive from a client. The total
  # number of requests that can be served through a keep alive connection.
  keepalive_requests 200;

  # Keeping connections open for a client which is not responding is not a
  # good idea, its always better to close that connection and free up memory
  # associated with it.
  reset_timedout_connection on;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush on;

  # For more than one virtual host increase the value
  server_names_hash_bucket_size 64;


  # Compression

  # Enable Gzip compressed.
  gzip on;

  # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
  # No longer needed because CloudFront now forwards requests using HTTP/1.1.
  # Disable (remove) this line and let nginx use its default value of 1.1.
  # gzip_http_version 1.0;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level 5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length 256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/plain
    text/x-component;
  # text/html is always compressed by HttpGzipModule


  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  # gzip_static on;


  # Open file (metadata) caching

  # Nginx can substantially improve performance is to enable caching for metadata.
  # Please note the fact that this does not enable caching for the content, but
  # its caching for metadata. This feature of nginx (which is again part of the
  # http block section), is called as Open_file_cache. The first thing to do is
  # to enable it.

  # The first parameter, max=10000 tells nginx web server to only cache this many
  # number of entries. Old inactive entries are automatically flushed out.
  # Please note the fact that the inactive switch tells the time after which a
  # cache entry will be removed if inactive.
  open_file_cache max=10000 inactive=30s;

  # Validity of a cache entry.
  open_file_cache_valid 60s;

  # Minimum number of times the cache entry has to be accessed before the
  # inactive number of seconds, so that it stays in cache
  open_file_cache_min_uses 2;

  # Cache errors while searching a file
  open_file_cache_errors on;


  # Virtual enabled host configs
  include sites-enabled/*;

}
